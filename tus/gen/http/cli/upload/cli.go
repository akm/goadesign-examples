// Code generated by goa v3.1.1, DO NOT EDIT.
//
// Upload HTTP client CLI support package
//
// Command:
// $ goa gen goa.design/examples/tus/design -o
// $(GOPATH)/src/goa.design/examples/tus

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	tusc "goa.design/examples/tus/gen/http/tus/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `tus (head|patch|options|post|delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` tus head --id "666dfedc1646ac7a507aa76ebaa109b8" --tus-resumable "1.0.0" --upload-offset 3821960643408970241` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		tusFlags = flag.NewFlagSet("tus", flag.ContinueOnError)

		tusHeadFlags            = flag.NewFlagSet("head", flag.ExitOnError)
		tusHeadIDFlag           = tusHeadFlags.String("id", "REQUIRED", "id is the unique upload identifier.")
		tusHeadTusResumableFlag = tusHeadFlags.String("tus-resumable", "REQUIRED", "")
		tusHeadUploadOffsetFlag = tusHeadFlags.String("upload-offset", "", "")

		tusPatchFlags              = flag.NewFlagSet("patch", flag.ExitOnError)
		tusPatchIDFlag             = tusPatchFlags.String("id", "REQUIRED", "id is the unique upload identifier.")
		tusPatchTusResumableFlag   = tusPatchFlags.String("tus-resumable", "REQUIRED", "")
		tusPatchUploadOffsetFlag   = tusPatchFlags.String("upload-offset", "REQUIRED", "")
		tusPatchUploadChecksumFlag = tusPatchFlags.String("upload-checksum", "", "")
		tusPatchStreamFlag         = tusPatchFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		tusOptionsFlags = flag.NewFlagSet("options", flag.ExitOnError)

		tusPostFlags                 = flag.NewFlagSet("post", flag.ExitOnError)
		tusPostTusResumableFlag      = tusPostFlags.String("tus-resumable", "REQUIRED", "")
		tusPostUploadLengthFlag      = tusPostFlags.String("upload-length", "", "")
		tusPostUploadDeferLengthFlag = tusPostFlags.String("upload-defer-length", "", "")
		tusPostUploadChecksumFlag    = tusPostFlags.String("upload-checksum", "", "")
		tusPostUploadMetadataFlag    = tusPostFlags.String("upload-metadata", "", "")
		tusPostTusMaxSizeFlag        = tusPostFlags.String("tus-max-size", "", "")
		tusPostStreamFlag            = tusPostFlags.String("stream", "REQUIRED", "path to file containing the streamed request body")

		tusDeleteFlags            = flag.NewFlagSet("delete", flag.ExitOnError)
		tusDeleteIDFlag           = tusDeleteFlags.String("id", "REQUIRED", "id is the unique upload identifier.")
		tusDeleteTusResumableFlag = tusDeleteFlags.String("tus-resumable", "REQUIRED", "")
	)
	tusFlags.Usage = tusUsage
	tusHeadFlags.Usage = tusHeadUsage
	tusPatchFlags.Usage = tusPatchUsage
	tusOptionsFlags.Usage = tusOptionsUsage
	tusPostFlags.Usage = tusPostUsage
	tusDeleteFlags.Usage = tusDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "tus":
			svcf = tusFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "tus":
			switch epn {
			case "head":
				epf = tusHeadFlags

			case "patch":
				epf = tusPatchFlags

			case "options":
				epf = tusOptionsFlags

			case "post":
				epf = tusPostFlags

			case "delete":
				epf = tusDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "tus":
			c := tusc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "head":
				endpoint = c.Head()
				data, err = tusc.BuildHeadPayload(*tusHeadIDFlag, *tusHeadTusResumableFlag, *tusHeadUploadOffsetFlag)
			case "patch":
				endpoint = c.Patch()
				data, err = tusc.BuildPatchPayload(*tusPatchIDFlag, *tusPatchTusResumableFlag, *tusPatchUploadOffsetFlag, *tusPatchUploadChecksumFlag)
				if err == nil {
					data, err = tusc.BuildPatchStreamPayload(data, *tusPatchStreamFlag)
				}
			case "options":
				endpoint = c.Options()
				data = nil
			case "post":
				endpoint = c.Post()
				data, err = tusc.BuildPostPayload(*tusPostTusResumableFlag, *tusPostUploadLengthFlag, *tusPostUploadDeferLengthFlag, *tusPostUploadChecksumFlag, *tusPostUploadMetadataFlag, *tusPostTusMaxSizeFlag)
				if err == nil {
					data, err = tusc.BuildPostStreamPayload(data, *tusPostStreamFlag)
				}
			case "delete":
				endpoint = c.Delete()
				data, err = tusc.BuildDeletePayload(*tusDeleteIDFlag, *tusDeleteTusResumableFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// tusUsage displays the usage of the tus command and its subcommands.
func tusUsage() {
	fmt.Fprintf(os.Stderr, `The tus service exposes the methods required to implement the tus protocol
Usage:
    %s [globalflags] tus COMMAND [flags]

COMMAND:
    head: Clients use the HEAD request to determine the offset at which the upload should be continued.
    patch: Clients use the PATCH method to start or resume an upload.
    options: Clients use the OPTIONS method to gather information about the Server’s current configuration.
    post: Clients use the POST method against a known upload creation URL to request a new upload resource.
    delete: Clients use the DELETE method to terminate completed and unfinished uploads allowing the Server to free up used resources.

Additional help:
    %s tus COMMAND --help
`, os.Args[0], os.Args[0])
}
func tusHeadUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] tus head -id STRING -tus-resumable STRING -upload-offset INT64

Clients use the HEAD request to determine the offset at which the upload should be continued.
    -id STRING: id is the unique upload identifier.
    -tus-resumable STRING: 
    -upload-offset INT64: 

Example:
    `+os.Args[0]+` tus head --id "666dfedc1646ac7a507aa76ebaa109b8" --tus-resumable "1.0.0" --upload-offset 3821960643408970241
`, os.Args[0])
}

func tusPatchUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] tus patch -id STRING -tus-resumable STRING -upload-offset INT64 -upload-checksum STRING -stream STRING

Clients use the PATCH method to start or resume an upload.
    -id STRING: id is the unique upload identifier.
    -tus-resumable STRING: 
    -upload-offset INT64: 
    -upload-checksum STRING: 
    -stream STRING: path to file containing the streamed request body

Example:
    `+os.Args[0]+` tus patch --id "844e3408e54c83d5b8e764c0c7ca3d11" --tus-resumable "1.0.0" --upload-offset 5978645777195763072 --upload-checksum "sha1 Kq5sNclPz7QV2+lfQIuc6R7oRu0=" --stream "goa.png"
`, os.Args[0])
}

func tusOptionsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] tus options

Clients use the OPTIONS method to gather information about the Server’s current configuration.

Example:
    `+os.Args[0]+` tus options
`, os.Args[0])
}

func tusPostUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] tus post -tus-resumable STRING -upload-length INT64 -upload-defer-length INT -upload-checksum STRING -upload-metadata STRING -tus-max-size INT64 -stream STRING

Clients use the POST method against a known upload creation URL to request a new upload resource.
    -tus-resumable STRING: 
    -upload-length INT64: 
    -upload-defer-length INT: 
    -upload-checksum STRING: 
    -upload-metadata STRING: 
    -tus-max-size INT64: 
    -stream STRING: path to file containing the streamed request body

Example:
    `+os.Args[0]+` tus post --tus-resumable "1.0.0" --upload-length 3703912367095950958 --upload-defer-length 1 --upload-checksum "sha1 Kq5sNclPz7QV2+lfQIuc6R7oRu0=" --upload-metadata "key1 val1,key2 val2" --tus-max-size 9030369208219462570 --stream "goa.png"
`, os.Args[0])
}

func tusDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] tus delete -id STRING -tus-resumable STRING

Clients use the DELETE method to terminate completed and unfinished uploads allowing the Server to free up used resources.
    -id STRING: id is the unique upload identifier.
    -tus-resumable STRING: 

Example:
    `+os.Args[0]+` tus delete --id "3ef6a40e2eb0adc802e1e090030a8f3f" --tus-resumable "1.0.0"
`, os.Args[0])
}
