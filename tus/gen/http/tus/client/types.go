// Code generated by goa v3.4.2, DO NOT EDIT.
//
// tus HTTP client types
//
// Command:
// $ goa gen goa.design/examples/tus/design -o
// $(GOPATH)/src/goa.design/examples/tus

package client

import (
	tus "goa.design/examples/tus/gen/tus"
	goa "goa.design/goa/v3/pkg"
)

// NewHeadResultOK builds a "tus" service "head" endpoint result from a HTTP
// "OK" response.
func NewHeadResultOK(tusResumable string, uploadOffset int64, uploadLength *int64, uploadDeferLength *int, uploadMetadata *string) *tus.HeadResult {
	v := &tus.HeadResult{}
	v.TusResumable = tusResumable
	v.UploadOffset = uploadOffset
	v.UploadLength = uploadLength
	v.UploadDeferLength = uploadDeferLength
	v.UploadMetadata = uploadMetadata

	return v
}

// NewHeadNotFound builds a tus service head endpoint NotFound error.
func NewHeadNotFound() *goa.ServiceError {
	v := &goa.ServiceError{}

	return v
}

// NewHeadGone builds a tus service head endpoint Gone error.
func NewHeadGone() *goa.ServiceError {
	v := &goa.ServiceError{}

	return v
}

// NewHeadInvalidTusResumable builds a tus service head endpoint
// InvalidTusResumable error.
func NewHeadInvalidTusResumable(tusVersion string) *tus.ErrInvalidTUSResumable {
	v := &tus.ErrInvalidTUSResumable{}
	v.TusVersion = tusVersion

	return v
}

// NewPatchResultNoContent builds a "tus" service "patch" endpoint result from
// a HTTP "NoContent" response.
func NewPatchResultNoContent(tusResumable string, uploadOffset int64, uploadExpires *string) *tus.PatchResult {
	v := &tus.PatchResult{}
	v.TusResumable = tusResumable
	v.UploadOffset = uploadOffset
	v.UploadExpires = uploadExpires

	return v
}

// NewPatchInvalidContentType builds a tus service patch endpoint
// InvalidContentType error.
func NewPatchInvalidContentType() *goa.ServiceError {
	v := &goa.ServiceError{}

	return v
}

// NewPatchInvalidOffset builds a tus service patch endpoint InvalidOffset
// error.
func NewPatchInvalidOffset() *goa.ServiceError {
	v := &goa.ServiceError{}

	return v
}

// NewPatchNotFound builds a tus service patch endpoint NotFound error.
func NewPatchNotFound() *goa.ServiceError {
	v := &goa.ServiceError{}

	return v
}

// NewPatchGone builds a tus service patch endpoint Gone error.
func NewPatchGone() *goa.ServiceError {
	v := &goa.ServiceError{}

	return v
}

// NewPatchInvalidChecksumAlgorithm builds a tus service patch endpoint
// InvalidChecksumAlgorithm error.
func NewPatchInvalidChecksumAlgorithm() *goa.ServiceError {
	v := &goa.ServiceError{}

	return v
}

// NewPatchChecksumMismatch builds a tus service patch endpoint
// ChecksumMismatch error.
func NewPatchChecksumMismatch() *goa.ServiceError {
	v := &goa.ServiceError{}

	return v
}

// NewPatchInternal builds a tus service patch endpoint Internal error.
func NewPatchInternal() *goa.ServiceError {
	v := &goa.ServiceError{}

	return v
}

// NewPatchInvalidTusResumable builds a tus service patch endpoint
// InvalidTusResumable error.
func NewPatchInvalidTusResumable(tusVersion string) *tus.ErrInvalidTUSResumable {
	v := &tus.ErrInvalidTUSResumable{}
	v.TusVersion = tusVersion

	return v
}

// NewOptionsResultNoContent builds a "tus" service "options" endpoint result
// from a HTTP "NoContent" response.
func NewOptionsResultNoContent(tusResumable string, tusVersion string, tusExtension string, tusMaxSize *int64, tusChecksumAlgorithm string) *tus.OptionsResult {
	v := &tus.OptionsResult{}
	v.TusResumable = tusResumable
	v.TusVersion = tusVersion
	v.TusExtension = tusExtension
	v.TusMaxSize = tusMaxSize
	v.TusChecksumAlgorithm = tusChecksumAlgorithm

	return v
}

// NewOptionsInvalidTusResumable builds a tus service options endpoint
// InvalidTusResumable error.
func NewOptionsInvalidTusResumable(tusVersion string) *tus.ErrInvalidTUSResumable {
	v := &tus.ErrInvalidTUSResumable{}
	v.TusVersion = tusVersion

	return v
}

// NewPostResultCreated builds a "tus" service "post" endpoint result from a
// HTTP "Created" response.
func NewPostResultCreated(location string, tusResumable string, uploadOffset int64, uploadExpires *string) *tus.PostResult {
	v := &tus.PostResult{}
	v.Location = location
	v.TusResumable = tusResumable
	v.UploadOffset = uploadOffset
	v.UploadExpires = uploadExpires

	return v
}

// NewPostMissingHeader builds a tus service post endpoint MissingHeader error.
func NewPostMissingHeader() *goa.ServiceError {
	v := &goa.ServiceError{}

	return v
}

// NewPostInvalidDeferLength builds a tus service post endpoint
// InvalidDeferLength error.
func NewPostInvalidDeferLength() *goa.ServiceError {
	v := &goa.ServiceError{}

	return v
}

// NewPostInvalidChecksumAlgorithm builds a tus service post endpoint
// InvalidChecksumAlgorithm error.
func NewPostInvalidChecksumAlgorithm() *goa.ServiceError {
	v := &goa.ServiceError{}

	return v
}

// NewPostMaximumSizeExceeded builds a tus service post endpoint
// MaximumSizeExceeded error.
func NewPostMaximumSizeExceeded() *goa.ServiceError {
	v := &goa.ServiceError{}

	return v
}

// NewPostChecksumMismatch builds a tus service post endpoint ChecksumMismatch
// error.
func NewPostChecksumMismatch() *goa.ServiceError {
	v := &goa.ServiceError{}

	return v
}

// NewPostInvalidTusResumable builds a tus service post endpoint
// InvalidTusResumable error.
func NewPostInvalidTusResumable(tusVersion string) *tus.ErrInvalidTUSResumable {
	v := &tus.ErrInvalidTUSResumable{}
	v.TusVersion = tusVersion

	return v
}

// NewDeleteResultNoContent builds a "tus" service "delete" endpoint result
// from a HTTP "NoContent" response.
func NewDeleteResultNoContent(tusResumable string) *tus.DeleteResult {
	v := &tus.DeleteResult{}
	v.TusResumable = tusResumable

	return v
}

// NewDeleteNotFound builds a tus service delete endpoint NotFound error.
func NewDeleteNotFound() *goa.ServiceError {
	v := &goa.ServiceError{}

	return v
}

// NewDeleteGone builds a tus service delete endpoint Gone error.
func NewDeleteGone() *goa.ServiceError {
	v := &goa.ServiceError{}

	return v
}

// NewDeleteInvalidTusResumable builds a tus service delete endpoint
// InvalidTusResumable error.
func NewDeleteInvalidTusResumable(tusVersion string) *tus.ErrInvalidTUSResumable {
	v := &tus.ErrInvalidTUSResumable{}
	v.TusVersion = tusVersion

	return v
}
